/** @mainpage

   @section intro Introduction

   GRAPES (Generic Resource-Aware P2P Environment for Streaming) is a
   set of libraries containing some ``building blocks'' for P2P
   streaming applications. Each application is decomposed in a set of
   <i>modules</i> (or <i>\em components</i>), and the libraries contain
   various alternative implementations of the modules.

   Ideally, a P2P streaming application can be built by linking such
   libraries with a minimum amount of code (in the best of the possible
   worlds, we would have some kind of GUI - like a graph editor - allowing
   to combine the various modules in different ways and to automatically
   generate the glue code for building the P2P program).

   @section structure GRAPES Structure

   The following Components/Modules can be idenfiied:
	- ml - <b>Messaging Layer</b> - ml.h
	- mon - <b>Monitoring Layer</b> - mon.h
	- rep - <b>Repository</b> - repoclient.h
	- som - <b>Scheduler and Overlay Manager</b> -
	- ul - <b>User</b> (interface) <b>Layer</b> - ul.h

   Each module can be composed by some submodules; for example, the som is
   composed by:
	- a @ref trade_msg submodule (send \& receive chunks)
	- a Scheduler
	- a Chunks Buffer
	- a @link topmanager.h Topology Manager @endlink
	- a @ref trade_sig Submodule

   Each module is separated into a sub-directory within the source tree,
   is described by a well-defined interface, and can have different
   implementations and/or bindings to different programming languages.
   The public Application Programming Interfaces (APIs) of the various
   modules are located in the <i>include/</i> sub-directory.

@section trade_msg Chunk Transport
   Chunk Transport is a submodule of the som which is responsible for
   sending and receiving chunks (described by the struct chunk from chunk.h).

   As for other submodules, chunk transport is provided through two kinds
   of APIs: the @link trade_msg_ha.h <i>high abstraction</i> @endlink
   and the @link trade_msg_la.h <i>low abstraction</i> @endlink API.

   One of the design goals of the chunk transport facilities is not to force
   any particular structure in the applications using it, and it should be
   possible to use its APIs (or at least the low abstraction one) in either
   multi-threaded programs, multi-process applications, single-threaded
   (event based) architectures, etc...

   Moreover, there should not be any dependency on external libraries, and
   the code should be fairly portable. Finally, the API should be generic
   enough to support both push and pull styles of streaming.

@section trade_sig Signalling
  @todo
*/
