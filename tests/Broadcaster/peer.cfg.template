# Initialization parameters for logging
log {
        level = 3
        logfile = "stdout"
}

# Initialization parameters for ML
network {
	timeout = 3
	# un-comment the "address" line and enter your primary
	# IP address if auto-detection fails
	# address = 192.168.35.15
	# UDP port 
	port = 1123
	# STUN server
	stun { server = "stun.ekiga.net" }
	# keepalive: send dummy packets this often (in seconds)
	# required on some firewalls to prevent closing the UDP "connection"
	# default: 0 (no keepalive)
	keepalive = 3
}

# Repository server to connect to (address:port)
repository {
	server = "repository.napa-wine.eu:9832" 
}

measurements {
        measurement Hopcount {
                flags { rx = true tx = true packet = true in_band = true }
		publish { min = true max = true } 
 
	}
        measurement "Clock Drift" {
                flags { rx = true tx = true packet = true in_band = true } 
		publish { min = true max=true } 
	}
}

# Configuration for the pseudo-"SOM" module
som {
	# Use "passive" for "client" peers
	protocol = "passive"
	# Publish(update) our own PeerID this often (sec)
	publishPeerIDPeriod = 30
	# channel name - separate our experiments from others
	# please change MyChannel to a reasonable value
	channel = "MyChannel"
}

# Configuration for the playout module
# 2 modes are supported: "VLC" (UDP-based streaming) and "Napa-WINE" (internal HTTP interface)
# the 2 modes are differentiated by the "stream" URL:
# - if it starts with "udp://", the VLC mode will be activated,
# - it it starts with "http://" then the internal HTTP interface is used
playout {
        # VLC-style playout streaming
        # Enter your desktop PC's IP address (and a port)
        # and tune your VLC to play this network stream
        stream = "udp://_YOUR_PC_ADDRESS:1234"
        #Constant (based on chunk duration) or variable (based on per-packet information) bitrate
        #Considered only by the VLC-style streamer
        #const_bitrate = false

        # "NAPA-WINE" style playout interface specification
        #stream = "http://127.0.0.1:888/path1/path2"
}




